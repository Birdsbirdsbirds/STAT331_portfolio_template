---
title: "STAT 331 Portfolio"
author: "Isaiah Woodard"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a C+.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

# Lab 2 

survey_dat <- read_csv(here("Week2", "Lab2", "surveys.csv"))

# Using read_csv() and here() to specify the file location

```

-   `csv` Example 2

*Code Feedback: Use the here() function when reading in csv files to specify the file pathway*

```{r}
#| label: wd-1-csv-2

# Lab 3

teacher_evals <- read_csv(here("Week3", "teacher_evals.csv"))

# Using read_csv() and here() to specify the file location


```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

NA

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

# Lab 4 Question 7

plot_data <- ca_childcare %>% 
  select(region_name, study_year, mc_infant, mc_toddler, mc_preschool) %>% 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "Age_Class",
               values_to = "Median") %>% 
  mutate(Age_Class = as.factor(Age_Class),
         Age_Class = fct_recode(.f = Age_Class,
                                Infant = "mc_infant",
                                Toddler = "mc_toddler",
                                Preschool = "mc_preschool"),
         region_name = fct_reorder2(.f = region_name,
                                    .x = study_year,
                                    .y = Median))

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

# Lab 5 

contractor <- facebook_event_checkin %>%
  mutate(date = ymd(date)) %>% # changes date to a ymd format so I can more easily use `lubridate` functions
  filter(str_detect(event_name,
                    pattern = "SQL Symphony Concert"),
         date %within% interval("2017-12-01", "2017-12-31") # looks for attendees of the SQL Concert in December
         ) %>%
  group_by(person_id) %>%
  filter(n() >= 3) %>% # determines people who attended 3 times
  select(-c(date)) %>%
  distinct(.keep_all = TRUE) %>% # reduces redundant entries
  left_join(y = person,
            by = join_by(person_id == id)) %>% 
  left_join(y = drivers_license,
            by = join_by(license_id == id)) %>% # some joins to access additional data
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         gender == "female") # filters by remaining demographics

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

NA

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# Lab 5 

contractor <- facebook_event_checkin %>%
  mutate(date = ymd(date)) %>% # changes date to a ymd format so I can more easily use `lubridate` functions
  filter(str_detect(event_name,
                    pattern = "SQL Symphony Concert"),
         date %within% interval("2017-12-01", "2017-12-31") # looks for attendees of the SQL Concert in December
         ) %>%
  group_by(person_id) %>%
  filter(n() >= 3) %>% # determines people who attended 3 times
  select(-c(date)) %>%
  distinct(.keep_all = TRUE) %>% # reduces redundant entries
  left_join(y = person,
            by = join_by(person_id == id)) %>% 
  left_join(y = drivers_license,
            by = join_by(license_id == id)) %>% # some joins to access additional data
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         gender == "female") # filters by remaining demographics

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

# Lab 4 Question 5

ca_childcare %>% 
  select(region_name, study_year, mhi_2018) %>% 
  filter(study_year %in% c(2008, 2018)) %>% 
  group_by(region_name, study_year) %>% 
  summarise(median = median(mhi_2018),
            .groups = "drop") %>% 
  pivot_wider(names_from = study_year,
              values_from = median,
              names_prefix = "Median Household Income ") %>%
  rename(Region = region_name) %>%
  arrange(desc(`Median Household Income 2018`))


```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

# Lab 5 

contractor <- facebook_event_checkin %>%
  mutate(date = ymd(date)) %>% # changes date to a ymd format so I can more easily use `lubridate` functions
  filter(str_detect(event_name,
                    pattern = "SQL Symphony Concert"),
         date %within% interval("2017-12-01", "2017-12-31") # looks for attendees of the SQL Concert in December
         ) %>%
  group_by(person_id) %>%
  filter(n() >= 3) %>% # determines people who attended 3 times
  select(-c(date)) %>%
  distinct(.keep_all = TRUE) %>% # reduces redundant entries
  left_join(y = person,
            by = join_by(person_id == id)) %>% 
  left_join(y = drivers_license,
            by = join_by(license_id == id)) %>% # some joins to access additional data
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         gender == "female") # filters by remaining demographics

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5 

witness2 <- person %>% 
  filter(address_street_name == "Franklin Ave",
         str_detect(name, pattern = "Annabel"))

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5 

contractor <- facebook_event_checkin %>%
  mutate(date = ymd(date)) %>% # changes date to a ymd format so I can more easily use `lubridate` functions
  filter(str_detect(event_name,
                    pattern = "SQL Symphony Concert"),
         date %within% interval("2017-12-01", "2017-12-31") # looks for attendees of the SQL Concert in December
         ) %>%
  group_by(person_id) %>%
  filter(n() >= 3) %>% # determines people who attended 3 times
  select(-c(date)) %>%
  distinct(.keep_all = TRUE) %>% # reduces redundant entries
  left_join(y = person,
            by = join_by(person_id == id)) %>% 
  left_join(y = drivers_license,
            by = join_by(license_id == id)) %>% # some joins to access additional data
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         gender == "female") # filters by remaining demographics

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

*Code Feedback: Is there a function that allows you to slice the max of a specific variable? Is there a way you can get the max and min in **one** pipeline?*

```{r}
#| label: wd-4-numeric-ex-1

# Lab 3 Question 10

teacher_evals_clean %>%
  group_by(teacher_id) %>%
  mutate(unique_courses = n_distinct(course_id)) %>%
  filter(unique_courses >= 5,
         question_no == "901") %>% 
  mutate(avg_score = mean(SET_score_avg)) %>% 
  ungroup() %>% 
  filter(avg_score == max(avg_score) | avg_score == min(avg_score)) %>% 
  arrange(teacher_id) %>% 
  select(teacher_id, avg_score) %>% 
  distinct(teacher_id, avg_score) %>% 
  arrange(avg_score)

```

-   Numeric Example 2

*Code Feedback: Is there a function that allows you to slice the max of a specific variable? Is there a way you can get the max and min in **one** pipeline?*

```{r}
#| label: wd-4-numeric-ex-2

# Lab 3 Question 11

teacher_evals_clean %>% 
  filter(seniority == 1) %>% 
  distinct(course_id, teacher_id, .keep_all = TRUE) %>% # removing instances of repeat questions
  mutate(avg_perc = mean(percent_failed_cur), .by = teacher_id) %>% 
  filter(avg_perc == max(avg_perc) | avg_perc == min(avg_perc)) %>% 
  select(teacher_id, avg_perc) %>% 
  arrange(avg_perc) %>% 
  kable()


```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

# Lab 4 Question 7

plot_data <- ca_childcare %>% 
  select(region_name, study_year, mc_infant, mc_toddler, mc_preschool) %>% 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "Age_Class",
               values_to = "Median") %>% 
  mutate(Age_Class = as.factor(Age_Class),
         Age_Class = fct_recode(.f = Age_Class,
                                Infant = "mc_infant",
                                Toddler = "mc_toddler",
                                Preschool = "mc_preschool"),
         region_name = fct_reorder2(.f = region_name,
                                    .x = study_year,
                                    .y = Median))

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

# Lab 4 Question 7

plot_data <- ca_childcare %>% 
  select(region_name, study_year, mc_infant, mc_toddler, mc_preschool) %>% 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "Age_Class",
               values_to = "Median") %>% 
  mutate(Age_Class = as.factor(Age_Class),
         Age_Class = fct_recode(.f = Age_Class,
                                Infant = "mc_infant",
                                Toddler = "mc_toddler",
                                Preschool = "mc_preschool"),
         region_name = fct_reorder2(.f = region_name,
                                    .x = study_year,
                                    .y = Median))

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

NA

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

contractor <- facebook_event_checkin %>%
  mutate(date = ymd(date)) %>% # changes date to a ymd format so I can more easily use `lubridate` functions
  filter(str_detect(event_name,
                    pattern = "SQL Symphony Concert"),
         date %within% interval("2017-12-01", "2017-12-31") # looks for attendees of the SQL Concert in December
         ) %>%
  group_by(person_id) %>%
  filter(n() >= 3) %>% # determines people who attended 3 times
  select(-c(date)) %>%
  distinct(.keep_all = TRUE) %>% # reduces redundant entries
  left_join(y = person,
            by = join_by(person_id == id)) %>% 
  left_join(y = drivers_license,
            by = join_by(license_id == id)) %>% # some joins to access additional data
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         gender == "female") # filters by remaining demographics
  

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

# Lab 5

suspects <- get_fit_now_member %>% 
  filter(membership_status == "gold", # includes only gold members
         str_detect(id, pattern = "^48Z")) %>% # includes only members whose ID starts with 48Z
  left_join(y = get_fit_now_check_in,
            by = join_by(id == membership_id)) %>% 
  left_join(y = interview,
            by = join_by(person_id)) %>%  # joins to access additional data
  filter(if_any(
    .cols = transcript,
    .fns = ~ !is.na(.x) # Checks for individuals with interviews. Removes those without. 
  ))


```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

NA

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

# Lab 5

contractor <- facebook_event_checkin %>%
  mutate(date = ymd(date)) %>% # changes date to a ymd format so I can more easily use `lubridate` functions
  filter(str_detect(event_name,
                    pattern = "SQL Symphony Concert"),
         date %within% interval("2017-12-01", "2017-12-31") # looks for attendees of the SQL Concert in December
         ) %>%
  group_by(person_id) %>%
  filter(n() >= 3) %>% # determines people who attended 3 times
  select(-c(date)) %>%
  distinct(.keep_all = TRUE) %>% # reduces redundant entries
  left_join(y = person,
            by = join_by(person_id == id)) %>% 
  left_join(y = drivers_license,
            by = join_by(license_id == id)) %>% # some joins to access additional data
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         gender == "female") # filters by remaining demographics
  

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

NA

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

NA

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

NA

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

NA

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

plot_data <- ca_childcare %>% 
  select(region_name, study_year, mfccsa, mcsa) %>% 
  filter(study_year == c(2008:2018)) %>% 
  group_by(region_name, study_year) %>% 
  summarise(median_mcsa = median(mcsa),
            median_mfccsa = median(mfccsa)) %>% 
  pivot_longer(cols = c(median_mcsa, median_mfccsa),
               names_to = "category",
               values_to = "medians")

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

ca_childcare %>% 
  select(region_name, study_year, mc_infant) %>% 
  filter(study_year %in% 2018) %>% 
  group_by(region_name, study_year) %>% 
  summarise(median = median(mc_infant),
            .groups = "drop") %>%
  pivot_wider(names_from = study_year,
              values_from = median,
              names_prefix = "Median Household Income ") %>%
  rename(Region = region_name) %>% 
  arrange(desc(`Median Household Income 2018`)) %>% 
  slice_min(`Median Household Income 2018`)

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Challenge 3
-   Lab 4
-   Challenge 4
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Lab 4 Question 7

plot_data %>% 
   ggplot(mapping = aes(x = study_year,
                        y = Median,
                        color = region_name)) +
  facet_wrap(~ factor(Age_Class, c("Infant", "Toddler", "Preschool"))) + # facet by age class, while specifying order
  geom_point(size = 1) + # adjusts point size 
  geom_smooth(method = "loess",
              linewidth = 0.8) + # adjusts line width 
  labs(title = "Weekly Median Price for Center-based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_color_manual(values = mycolors) + # assigns colors from myColors vector
  scale_x_continuous(n.breaks = 6) + # specifies breaks 
  scale_y_continuous(limits = c(100, 500)) + # specifies limits 
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 7), # changes axis text size 
        legend.text = element_text(size = 6), # changes legend text size 
        legend.title = element_text(size = 9), # changes legend title size 
        legend.key.height = unit(0.5, 'cm'), # adjusts legend height 
        plot.title = element_text(size = 10, vjust = 3)) # Moves up title + adjusts title size  

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Lab 5

contractor <- facebook_event_checkin %>%
  mutate(date = ymd(date)) %>% # changes date to a ymd format so I can more easily use `lubridate` functions
  filter(str_detect(event_name,
                    pattern = "SQL Symphony Concert"),
         date %within% interval("2017-12-01", "2017-12-31") # looks for attendees of the SQL Concert in December
         ) %>%
  group_by(person_id) %>%
  filter(n() >= 3) %>% # determines people who attended 3 times
  select(-c(date)) %>%
  distinct(.keep_all = TRUE) %>% # reduces redundant entries
  left_join(y = person,
            by = join_by(person_id == id)) %>% 
  left_join(y = drivers_license,
            by = join_by(license_id == id)) %>% # some joins to access additional data
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         gender == "female") # filters by remaining demographics
  

```

-   Example of function formatting

```{r}
#| label: r-2-3

NA

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

NA

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

NA

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 4 Question 8

ca_childcare %>% 
  ggplot(aes(x = mhi_2018,
             y = mc_infant)) +
  geom_point() +
  geom_smooth(method = lm, color = "darkred") +
  labs(title = "Median Household Income v. Infant Childcare Costs in California",
       x = "Median Household Income",
       y = "Median Weekly Childcare Costs") +
  scale_x_continuous(labels = scales::dollar_format(),
                     breaks = c(40000, 60000, 80000, 100000)) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_bw()

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Lab 3 Question 2

teacher_evals_compare %>%
  ggplot(mapping = aes(x = sen_level,
                       fill = SET_level)
         ) +
  geom_bar(position = "fill", stat = "count") +
  scale_fill_manual(values = c("#a880ca", "#ab834a")) +
  labs(title = "Evaluation of Teachers' Use of Activities",
       x = "Years of Experience",
       y = "",
       fill = "Evaluation Rating") + 
  scale_y_continuous(labels = scales::percent) +
  theme_bw() +
  theme(legend.position = "top")

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

NA

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

# Challenge 4

plot_data %>% 
  ggplot(aes(x = study_year,
             y = medians,
             color = category)) +
  facet_wrap(~ region_name) +
  geom_point() +
  scale_x_continuous(breaks = c(2008, 2010, 2012, 2014, 2016, 2018)) +
  labs(title = "Price of Childcare Over Time in California",
       subtitle = "Plots subdivided for <span style='color:#009e73;'>center-based</span> and <span     style='color:#d55e00;'>at-home</span> childcare",
       x = "Study Year",
       y = "Median Weekly Cost of Childcare ($)") +
  scale_color_manual(values = c("#009e73", "#d55e00")) +
  theme_bw() +
  theme(plot.subtitle = ggtext::element_markdown(),
        axis.text = element_text(size = 5),
        legend.position = "")

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

# Challenge 4

plot_data %>% 
  ggplot(aes(x = study_year,
             y = medians,
             color = category)) +
  facet_wrap(~ region_name) +
  geom_point() +
  scale_x_continuous(breaks = c(2008, 2010, 2012, 2014, 2016, 2018)) +
  labs(title = "Price of Childcare Over Time in California",
       subtitle = "Plots subdivided for <span style='color:#009e73;'>center-based</span> and <span     style='color:#d55e00;'>at-home</span> childcare",
       x = "Study Year",
       y = "Median Weekly Cost of Childcare ($)") +
  scale_color_manual(values = c("#009e73", "#d55e00")) +
  theme_bw() +
  theme(plot.subtitle = ggtext::element_markdown(),
        axis.text = element_text(size = 5),
        legend.position = "")

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

# Lab 4 Question 7

# Modified to use Brewer Palette "Set2", which is colorblind-friendly

mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(10)

plot_data %>% 
   ggplot(mapping = aes(x = study_year,
                        y = Median,
                        color = region_name)) +
  facet_wrap(~ factor(Age_Class, c("Infant", "Toddler", "Preschool"))) +
  geom_point(size = 1) +
  geom_smooth(method = "loess",
              linewidth = 0.8) + 
  labs(title = "Weekly Median Price for Center-based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_color_manual(values = mycolors) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 500)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 7),
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 9),
        legend.key.height = unit(0.5, 'cm'),
        plot.title = element_text(size = 10, vjust = 3))

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

# Lab 4 Question 7

mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(10)

plot_data %>% 
   ggplot(mapping = aes(x = study_year,
                        y = Median,
                        color = region_name)) +
  facet_wrap(~ factor(Age_Class, c("Infant", "Toddler", "Preschool"))) +
  geom_point(size = 1) +
  geom_smooth(method = "loess",
              linewidth = 0.8) + 
  labs(title = "Weekly Median Price for Center-based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_color_manual(values = mycolors) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 500)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 7),
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 9),
        legend.key.height = unit(0.5, 'cm'),
        plot.title = element_text(size = 10, vjust = 3))

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# Lab 4 Question 7

mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(10)

plot_data %>% 
   ggplot(mapping = aes(x = study_year,
                        y = Median,
                        color = region_name)) +
  facet_wrap(~ factor(Age_Class, c("Infant", "Toddler", "Preschool"))) +
  geom_point(size = 1) +
  geom_smooth(method = "loess",
              linewidth = 0.8) + 
  labs(title = "Weekly Median Price for Center-based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_color_manual(values = mycolors) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 500)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 7),
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 9),
        legend.key.height = unit(0.5, 'cm'),
        plot.title = element_text(size = 10, vjust = 3))

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

# Lab 4 Question 7

mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(10)

plot_data %>% 
   ggplot(mapping = aes(x = study_year,
                        y = Median,
                        color = region_name)) +
  facet_wrap(~ factor(Age_Class, c("Infant", "Toddler", "Preschool"))) +
  geom_point(size = 1) +
  geom_smooth(method = "loess",
              linewidth = 0.8) + 
  labs(title = "Weekly Median Price for Center-based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_color_manual(values = mycolors) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 500)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 7),
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 9),
        legend.key.height = unit(0.5, 'cm'),
        plot.title = element_text(size = 10, vjust = 3))

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

# Lab 4 Question 7

mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(10)

plot_data %>% 
   ggplot(mapping = aes(x = study_year,
                        y = Median,
                        color = region_name)) +
  facet_wrap(~ factor(Age_Class, c("Infant", "Toddler", "Preschool"))) +
  geom_point(size = 1) +
  geom_smooth(method = "loess",
              linewidth = 0.8) + 
  labs(title = "Weekly Median Price for Center-based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_color_manual(values = mycolors) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 500)) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 7),
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 9),
        legend.key.height = unit(0.5, 'cm'),
        plot.title = element_text(size = 10, vjust = 3))

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

# Challenge 4

plot_data %>% 
  ggplot(aes(x = study_year,
             y = medians,
             color = category)) +
  facet_wrap(~ region_name) +
  geom_point() +
  scale_x_continuous(breaks = c(2008, 2010, 2012, 2014, 2016, 2018)) +
  labs(title = "Price of Childcare Over Time in California",
       subtitle = "Plots subdivided for <span style='color:#009e73;'>center-based</span> and <span     style='color:#d55e00;'>at-home</span> childcare",
       x = "Study Year",
       y = "Median Weekly Cost of Childcare ($)") +
  scale_color_manual(values = c("#009e73", "#d55e00")) +
  theme_bw() +
  theme(plot.subtitle = ggtext::element_markdown(),
        axis.text = element_text(size = 5),
        legend.position = "")

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

NA

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

NA

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# Challenge 4

plot_data <- ca_childcare %>% 
  select(region_name, study_year, mfccsa, mcsa) %>% 
  filter(study_year == c(2008:2018)) %>% 
  group_by(region_name, study_year) %>% 
  summarise(median_mcsa = median(mcsa),
            median_mfccsa = median(mfccsa)) %>% 
  pivot_longer(cols = c(median_mcsa, median_mfccsa),
               names_to = "category",
               values_to = "medians")

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

NA

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Challenge 4

plot_data <- ca_childcare %>% 
  select(region_name, study_year, mfccsa, mcsa) %>% 
  filter(study_year == c(2008:2018)) %>% 
  group_by(region_name, study_year) %>% 
  summarise(median_mcsa = median(mcsa),
            median_mfccsa = median(mfccsa)) %>% 
  pivot_longer(cols = c(median_mcsa, median_mfccsa),
               names_to = "category",
               values_to = "medians")

```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 3 Question 6

teacher_evals_clean %>% 
  summarise(unique_instructors = n_distinct(teacher_id),
            unique_courses = n_distinct(course_id))

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

# Challenge 4

# Renamed columns to be more descriptive
# Recoded levels to be more descriptive with fct_recode()

plot_data <- ca_childcare %>% 
  select(region_name, study_year, mfccsa, mcsa) %>% 
  filter(study_year == c(2008:2018)) %>% 
  group_by(region_name, study_year) %>% 
  summarise(median_mcsa = median(mcsa),
            median_mfccsa = median(mfccsa),
            .groups = "drop") %>% 
  pivot_longer(cols = c(median_mcsa, median_mfccsa),
               names_to = "Type of Childcare",
               values_to = "Median Weekly Costs") %>% 
  mutate(`Type of Childcare` = as.factor(`Type of Childcare`),
         `Type of Childcare` = fct_recode(`Type of Childcare`,
                                          `Center-based` = "median_mcsa",
                                          `At-home` = "median_mfccsa")) %>% 
  rename(Year = study_year,
         Region = region_name)

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

NA

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

# Lab 4 Question 5

ca_childcare %>% 
  select(region_name, study_year, mhi_2018) %>% 
  filter(study_year %in% c(2008, 2018)) %>% 
  group_by(region_name, study_year) %>% 
  summarise(median = median(mhi_2018),
            .groups = "drop") %>% 
  pivot_wider(names_from = study_year,
              values_from = median,
              names_prefix = "Median Household Income ") %>%
  rename(Region = region_name) %>%
  arrange(desc(`Median Household Income 2018`))


```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

NA

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

# Lab 4 Question 7

plot_data <- ca_childcare %>% 
  select(region_name, study_year, mc_infant, mc_toddler, mc_preschool) %>% 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "Age_Class",
               values_to = "Median") %>% 
  mutate(Age_Class = as.factor(Age_Class),
         Age_Class = fct_recode(.f = Age_Class,
                                Infant = "mc_infant",
                                Toddler = "mc_toddler",
                                Preschool = "mc_preschool"),
         region_name = fct_reorder2(.f = region_name,
                                    .x = study_year,
                                    .y = Median))

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Lab 5

contractor <- facebook_event_checkin %>%
  mutate(date = ymd(date)) %>% # changes date to a ymd format so I can more easily use `lubridate` functions
  filter(str_detect(event_name,
                    pattern = "SQL Symphony Concert"),
         date %within% interval("2017-12-01", "2017-12-31") # looks for attendees of the SQL Concert in December
         ) %>%
  group_by(person_id) %>%
  filter(n() >= 3) %>% # determines people who attended 3 times
  select(-c(date)) %>%
  distinct(.keep_all = TRUE) %>% # reduces redundant entries
  left_join(y = person,
            by = join_by(person_id == id)) %>% 
  left_join(y = drivers_license,
            by = join_by(license_id == id)) %>% # some joins to access additional data
  filter(car_make == "Tesla",
         car_model == "Model S",
         hair_color == "red",
         gender == "female") # filters by remaining demographics
  

```

-   using `across()`

```{r}
#| label: pe-1-across

# Lab 3 Question 5

teacher_evals_clean <- teacher_evals %>% 
  rename(sex = gender) %>%
  select(course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, 
         percent_failed_cur, academic_degree, seniority, sex) %>% 
  filter(!no_participants < 10) %>% 
  mutate(across(c(teacher_id, course_id, question_no, academic_degree, sex), as.factor))

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

NA

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

NA

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

NA

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

NA

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

NA

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

NA

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

NA

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# Lab 4 - Using forcats package

ca_childcare <- ca_childcare %>%  
  mutate(county_name = str_remove(county_name, " County")) %>% 
  mutate(region_name = fct_collapse(.f = as.factor(county_name), 
                                    `Superior California` = superior_counties,
                                    `North Coast` = north_coast_counties,
                                    `San Francisco Bay Area` = san_fran_counties,
                                    `North San Joaquin Valley` = n_san_joaquin_counties,
                                    `South San Joaquin Valley` = s_san_joaquin_counties,
                                    `Central Coast` = central_coast_counties,
                                    `Inland Empire` = inland_counties,
                                    `Los Angeles County` = la_county,
                                    `Orange County` = orange_county,
                                    `San Diego-Imperial` = san_diego_imperial_counties))

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

# Challenge 4 Plot

# Modified for plot data to come directly from data wrangling pipeline

ca_childcare %>% 
  select(region_name, study_year, mfccsa, mcsa) %>% 
  filter(study_year == c(2008:2018)) %>% 
  group_by(region_name, study_year) %>% 
  summarise(median_mcsa = median(mcsa),
            median_mfccsa = median(mfccsa)) %>% 
  pivot_longer(cols = c(median_mcsa, median_mfccsa),
               names_to = "category",
               values_to = "medians") %>% 
  ggplot(aes(x = study_year,
             y = medians,
             color = category)) +
  facet_wrap(~ region_name) +
  geom_point() +
  scale_x_continuous(breaks = c(2008, 2010, 2012, 2014, 2016, 2018)) +
  labs(title = "Price of Childcare Over Time in California",
       subtitle = "Plots subdivided for <span style='color:#009e73;'>center-based</span> and <span style='color:#d55e00;'>at-home</span> childcare",
       x = "Study Year",
       y = "Median Weekly Cost of Childcare ($)") +
  scale_color_manual(values = c("#009e73", "#d55e00")) +
  theme_bw() +
  theme(plot.subtitle = ggtext::element_markdown(),
        axis.text = element_text(size = 5),
        legend.position = "")

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

NA

```

-   Example 2

```{r}
#| label: dsm-1-2

NA

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# Lab 3 Question 3

chisq.test(x = teacher_evals_compare$sen_level, y = teacher_evals_compare$SET_level)

```

-   Example 2

```{r}
#| label: dsm-2-2

# Lab 4 Question 9

reg_mod1 <- lm(ca_childcare$mc_infant ~ ca_childcare$mhi_2018)
summary(reg_mod1)

```

-   Example 3

```{r}
#| label: dsm-2-3

# Lab 1 

t.test(len ~ supp, data = ToothGrowth, var.equal = FALSE) 

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

I've revised my thinking several times throughout the course by taking feedback to make code more efficient or improve readability in my plots and tables. I have consistently resubmitted assignments where many skills were growing. There are many examples here where code has been modified from my original submission (and some which has been modified expressly for use in the portfolio, denoted with comments throughout).

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

Noted in assignment body.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I've often extended my thinking in this course by applying previously-learned techniques in new ways. I think this is particularly true of my approach to data visualization in challenge 4. For the open-ended analysis, I opted to use HTML editing tools learned in week 2 to add some color directly to the text of my plots - improving readability on what would otherwise be a busy visual.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

![](Screenshot Peer Review 1.jpg){width="139"}

![](Screenshot Peer Review 2.jpg){width="140"}

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

I think when I first started doing the pair programming activities, I stuck to my assigned role well, but didn't really know how to support my coding partner if we hit a snag (without telling them a solution I thought of directly). I think I've gotten better at prompting helpful next steps/ resources without centering my own ideas (e.g. saying this reminds me of an example we saw earlier, prompting them to look at the handouts, etc.). I've picked up those habits in part by observing how others have helped me when I hit snags, without making me feel like they were taking over my role.
